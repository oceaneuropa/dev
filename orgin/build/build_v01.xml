<?xml version="1.0"?>
<!-- see https://stackoverflow.com/questions/1163998/do-i-have-a-way-to-check-the-existence-of-a-directory-in-ant-not-a-file/17106050?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa -->
<project name="origin" default="main">

	<!-- import the util build file -->
	<import file="./build-util.xml" />

	<!-- folder where this build.xml is located -->
	<dirname property="root.dir" file="${ant.file.origin}" />

	<!-- load properties from build.properties file -->
	<property file="${root.dir}/build.properties" />

	<!--
		main method, which calls:
		print_properties()
		init_target_dir()
	-->
	<target name="main" depends="
		_main,
		print_properties, 
		init_target_folder, 
		init_bin_folder,
		init_configurations_folder,
		init_plugins_folder
		">
		<antcall target="print_completion_time" />
	</target>

	<target name="print_completion_time">
		<tstamp>
			<format property="build.completion.time" pattern="dd-MMM-yyyy hh:mm aa" />
		</tstamp>
		<echo message="BUILD SUCCESSFUL" />
		<echo message="Completion time: ${build.completion.time}" />
	</target>

	<target name="_main">
		<println message="main()" />
	</target>

	<!-- method to print out properties -->
	<target name="print_properties">
		<println message="print_properties()" />

		<println indent="    " message="workspace.dir=${workspace.dir}" />
		<println indent="    " message="target.platform.dir=${target.platform.dir}" />
		<println indent="    " message="target.dir=${target.dir}" />
	</target>

	<!-- method to create default folder structures in ${target.dir} folder -->
	<target name="init_target_folder">
		<println message="init_target_folder()" />

		<mkdir dir="${target.dir}/apps" />
		<mkdir dir="${target.dir}/bin" />
		<mkdir dir="${target.dir}/configurations" />
		<mkdir dir="${target.dir}/downloads" />
		<mkdir dir="${target.dir}/nodespaces" />
		<mkdir dir="${target.dir}/plugins" />

		<check-dir-exists path="${target.dir}/apps" />
		<check-dir-exists path="${target.dir}/bin" />
		<check-dir-exists path="${target.dir}/configurations" />
		<check-dir-exists path="${target.dir}/downloads" />
		<check-dir-exists path="${target.dir}/nodespaces" />
		<check-dir-exists path="${target.dir}/plugins" />
	</target>

	<!-- method to copy/paste files to ${target.dir}/bin folder -->
	<target name="init_bin_folder">
		<println message="init_bin_folder()" />

		<copy todir="${target.dir}/bin" includeEmptyDirs="true">
			<fileset dir="${root.dir}/bin" includes="*.*" />
			<fileset dir="${root.dir}/bin" includes="**/*.*" />
		</copy>

		<chmod perm="ugo+rx">
			<fileset dir="${target.dir}/bin" includes="*.sh" />
			<fileset dir="${target.dir}/bin" includes="**/*.sh" />
		</chmod>
	</target>

	<!-- method to copy/paste files to ${target.dir}/configuration folder -->
	<target name="init_configurations_folder">
		<println message="init_configurations_folder()" />

		<copy todir="${target.dir}/configurations" includeEmptyDirs="true">
			<fileset dir="${root.dir}/configurations" includes="*.*" />
			<fileset dir="${root.dir}/configurations" includes="**/*.*" />
		</copy>
	</target>

	<!-- method to copy/paste jar files to ${target.dir}/plugins folder -->
	<target name="init_plugins_folder">
		<println message="init_plugins_folder()" />

		<copy todir="${target.dir}/plugins/apache.aries" includeEmptyDirs="false">
			<fileset dir="${target.platform.dir}/apache.aries" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/apache.common">
			<fileset dir="${target.platform.dir}/apache.common" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/apache.felix">
			<fileset dir="${target.platform.dir}/apache.felix" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/apache.http">
			<fileset dir="${target.platform.dir}/apache.http" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/apache.netty">
			<fileset dir="${target.platform.dir}/apache.netty" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/com.fasterxml.jackson">
			<fileset dir="${target.platform.dir}/com.fasterxml.jackson" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/common">
			<fileset dir="${target.platform.dir}/common" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/eclipse.equinox">
			<fileset dir="${target.platform.dir}/eclipse.equinox" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/eclipse.jetty">
			<fileset dir="${target.platform.dir}/eclipse.jetty_9.3.21" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/eclipse.osgi">
			<fileset dir="${target.platform.dir}/eclipse.osgi" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/javax">
			<fileset dir="${target.platform.dir}/javax" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/log">
			<fileset dir="${target.platform.dir}/log" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins/system">
			<fileset dir="${target.platform.dir}/system" includes="*.jar" />
		</copy>
		<copy todir="${target.dir}/plugins">
			<fileset dir="${target.platform.dir}" includes="org.eclipse.osgi_*.jar" />
		</copy>
	</target>

	<!-- method to copy/paste jar files to ${target.dir}/system folder -->
	<!-- target name="init_system_folder">
		<println message="init_system_folder()" />

		<copy todir="${target.dir}/system">
			<fileset dir="${target.platform.dir}/system" includes="**/*.jar" />
		</copy>
	</target -->

	<!--
		clean the build:
		clean_target_dir()
	-->
	<target name="clean" depends="clean_target_dir">
	</target>

	<target name="clean_target_dir">
		<println message="clean_target_dir()" />

		<delete dir="${target.dir}/apps" />
		<delete dir="${target.dir}/bin" />
		<delete dir="${target.dir}/configurations" />
		<delete dir="${target.dir}/downloads" />
		<delete dir="${target.dir}/nodespaces" />
		<delete dir="${target.dir}/plugins" />

		<check-dir-exists path="${target.dir}/apps" />
		<check-dir-exists path="${target.dir}/bin" />
		<check-dir-exists path="${target.dir}/configurations" />
		<check-dir-exists path="${target.dir}/downloads" />
		<check-dir-exists path="${target.dir}/nodespaces" />
		<check-dir-exists path="${target.dir}/plugins" />
	</target>

</project>
